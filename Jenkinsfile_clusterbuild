def terraformInit() {
    // Common steps or tasks go here
    sh "terraform init"
}

def createTerraformWorkspace(workspaceName) {
    def workspaceExists = sh(script: "terraform workspace list | grep -q ${workspaceName}", returnStatus: true) == 0

    if (!workspaceExists) {
        sh "terraform workspace new ${workspaceName}"
    } else {
        echo "Terraform workspace ${workspaceName} already exists."
        error("Aborting the pipeline.")
    }
}

def terraformPlan(workspace) {
    // Common steps or tasks go here
    sh "terraform workspace select '$workspace'"
    sh "terraform plan -out=tfplan -var-file vars/'$workspace'.tfvars"
}

def terraformApply() {
    // Common steps or tasks go here
    sh "terraform apply -auto-approve tfplan"
}

def readFileAndProcessLines(filePath) {
    def fileContent = readFile(filePath)
    return fileContent.readLines()
}

def selectWorkspace() {
    def filePath = './workspaces.txt'
    def linesArray = readFileAndProcessLines(filePath)

    // linesArray.each { line ->
    //     echo "Line: ${line}"
    // }

    def userChoice = input(
        id: 'userInput',
        message: 'Select a line:',
        parameters: [
            choice(name: 'Select Line', choices: linesArray)
        ]
    )

    echo "User Selected Line: ${userChoice}"
    env.selected_workspace = userChoice
    return userChoice
}

def takeApproval(stageName) {
    stage("Approval for $stageName") {
        script {
            def userInput = input(
                id: 'userInput',
                message: 'Select an action:',
                parameters: [
                    choice(name: 'ACTION', choices: 'Proceed\nAbort', description: 'Choose an action')
                ]
            )

            if (userInput == 'Proceed') {
                echo 'Proceeding with the next steps.'
            } else if (userInput == 'Abort') {
                currentBuild.result = 'ABORTED'
                error('User chose to abort all steps.')
            }
        }
    }
}

pipeline {
    agent any

    stages {
        stage('Terraform Dev Deployment') {
            agent { label 'dev' }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'terraform_CICD']]) {
                    script {
                        stage('Checkout') {
                            checkout scm
                        }
                        stage('Terraform Init') {
                            terraformInit()
                        }
                        stage("Select the Workspace") {
                            selectWorkspace()
                        }
                        stage("Create the Workspace") {
                            createTerraformWorkspace(env.selected_workspace)
                        }
                        stage("Terraform plan for $env.selected_workspace") {
                            terraformPlan(env.selected_workspace)
                        }
                        takeApproval("Terraform plan")
                        stage("Terraform apply for $env.selected_workspace") {
                            terraformApply()
                        }
                    }
                }
            }
        }
    }
}
