def terraforminit() {
    // Your common steps or tasks go here
    sh "terraform init"
}


def createTerraformWorkspace(workspaceName) {
    // Check if the Terraform workspace exists
    def workspaceExists = sh(script: "terraform workspace list | grep -q ${workspaceName}", returnStatus: true) == 0

    // Create the Terraform workspace if it does not exist
    if (!workspaceExists) {
        sh "terraform workspace new ${workspaceName}"
    } else {
        echo "Terraform workspace ${workspaceName} already exists."
    }
}

def terraformplan(workspace) {
    // Your common steps or tasks go here
    sh "terraform workspace select '$workspace'"
    sh "terraform plan -out=tfplan -var-file vars/'$workspace'.tfvars"
}

def terraformapply() {
    // Your common steps or tasks go here
    sh "terraform apply -auto-approve tfplan"
}


def selectWorkspace(folderPath) {
    def workspaces = sh(returnStdout: true, script: "ls $folderPath")
    workspaces.split().each {
        //condition to skip files if any
        choiceArray << it
    }
    def userInput = input(
        id: 'userInput',
        message: 'Select a file',
        parameters: [
            choice(name: 'FILE', description: 'Select a file', defaultValue: '', choices: choiceArray)
        ]
    )

    def selectedFile = userInput['FILE']
    def newWorkspace = selectedFile.name.replaceAll(/\..+$/, '')

    echo "Selected file: ${selectedFile}"
    echo "File name without extension: ${newWorkspace}"

    return newWorkspace
}

def takeApproval(String stageName) {
    stage("Approval for $stageName") {
        
            script {
                  def userInput = input(
                        id: 'userInput',
                        message: 'Select an action:',
                        parameters: [
                            choice(name: 'ACTION', choices: 'Proceed\nAbort', description: 'Choose an action')
                        ]
                    )

                    if (userInput == 'Proceed') {
                        echo 'Proceeding with the next steps.'
                    } else if (userInput == 'Abort') {
                        currentBuild.result = 'ABORTED'
                        error('User chose to abort all steps.')
                    }
                }
            }
        
    }


pipeline {
    agent any

    stages {

        stage('Terraform Dev Deployment'){
            agent { label 'dev'}
            // when {
            //     branch 'dev' // Only build the 'main' branch
            // }
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'terraform_CICD']]){
                script {
                    stage('Checkout') {
                                        checkout scm
    
                                }
                    stage('Terraform Init') {
                            terraforminit()
                        }

                        
                    stage("Select the Workspace"){
                            
                         def  selected_workspace = selectWorkspace("./vars/")
                        }
                        

                    stage("Terraform plan for $selected_workspace"){
                            
                                terraformplan(selected_workspace)
                        
                    }

                    takeApproval(selected_workspace)

                    stage("Terraform apply for $selected_workspace"){
                            
                                terraformapply()
                        
                    }
                }
                
                }
            }
        }
        }
    }